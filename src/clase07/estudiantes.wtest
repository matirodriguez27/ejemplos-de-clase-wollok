import clase07.cursadas.*
import clase07.estudiantes.*

describe "Estudiantes" {
	const cursoPdeP = new Curso(materia = "PdeP")
	
	test "Si un estudiante recibe 2 tareas y estudia, le queda una pendiente" {
		cursoPdeP.agregarEstudiante(caro)
		cursoPdeP.darTarea("TP1", new Date(), 2)
		cursoPdeP.darTarea("TP2", (new Date()).plusDays(1), 1.5)
		
		caro.estudiar()
		assert.equals(1, cursoPdeP.tareasPedidas().count {tarea => not caro.completo(tarea)})
	}
	
	test "No es cierto que un estudiante completó una tarea que no recibió" {
		cursoPdeP.darTarea("TP1", new Date(), 2)
		
		assert.notThat(leo.completo(cursoPdeP.tareasPedidas().first()))
	}
	
	test "Cuando un estudiante completa una tarea, no impacta a otro estudiante que también la recibió" {
		cursoPdeP.agregarEstudiante(caro)
		cursoPdeP.agregarEstudiante(leo)
		cursoPdeP.darTarea("TP1", new Date().minusDays(7), 2)
		
		caro.estudiar()
		assert.equals(#{caro}, cursoPdeP.estanAlDia())
	}
	
	test "Leo elige trabajar sobre la tarea con fecha de entrega más próxima" {
		cursoPdeP.agregarEstudiante(leo)
		cursoPdeP.darTarea("TP1", new Date().plusDays(1), 3)
		cursoPdeP.darTarea("TP2", new Date().plusDays(2), 4)
		
		leo.estudiar()
		
		const tareaCompletada = cursoPdeP.tareasPedidas().find {tarea => leo.completo(tarea)}
		assert.equals("TP1", tareaCompletada.descripcion())
	}
	test "Caro elige trabajar sobre la tarea que más tiempo requiere" {
		cursoPdeP.agregarEstudiante(caro)
		cursoPdeP.darTarea("TP1", new Date().plusDays(1), 3)
		cursoPdeP.darTarea("TP2", new Date().plusDays(2), 4)
		
		caro.estudiar()
		
		const tareaCompletada = cursoPdeP.tareasPedidas().find {tarea => caro.completo(tarea)}
		assert.equals("TP2", tareaCompletada.descripcion())
	}
}
